// tslint:disable
/**
 * CVU API
 * CVU API documentation
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: roberto.villarejo@comimsa.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface Domicilio
 */
export interface Domicilio {
    /**
     * 
     * @type {string}
     * @memberof Domicilio
     */
    direccion?: string;
    /**
     * 
     * @type {string}
     * @memberof Domicilio
     */
    tipo?: string;
}
/**
 * 
 * @export
 * @interface EntidadFederativa
 */
export interface EntidadFederativa {
    /**
     * 
     * @type {number}
     * @memberof EntidadFederativa
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof EntidadFederativa
     */
    nombre?: string;
}
/**
 * 
 * @export
 * @interface Institucion
 */
export interface Institucion {
    /**
     * 
     * @type {string}
     * @memberof Institucion
     */
    clave?: string;
    /**
     * 
     * @type {EntidadFederativa}
     * @memberof Institucion
     */
    entidadFederativa?: EntidadFederativa;
    /**
     * 
     * @type {string}
     * @memberof Institucion
     */
    localidad?: string;
    /**
     * 
     * @type {string}
     * @memberof Institucion
     */
    municipio?: string;
    /**
     * 
     * @type {string}
     * @memberof Institucion
     */
    nombre?: string;
}
/**
 * 
 * @export
 * @interface PersonaFisica
 */
export interface PersonaFisica {
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    apellidoMaterno?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    apellidoPaterno?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    correo?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    curp?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    cvu?: string;
    /**
     * 
     * @type {Array<Domicilio>}
     * @memberof PersonaFisica
     */
    domicilios?: Array<Domicilio>;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    genero?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    gradoAcademico?: string;
    /**
     * 
     * @type {Array<Institucion>}
     * @memberof PersonaFisica
     */
    instituciones?: Array<Institucion>;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    login?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    nacionalidad?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    nivelAcademico?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    nivelsni?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    nombre?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    paisResidencia?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    rcea?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    rfc?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    telefono?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaFisica
     */
    titulo?: string;
}
/**
 * 
 * @export
 * @interface PersonaMoral
 */
export interface PersonaMoral {
    /**
     * 
     * @type {string}
     * @memberof PersonaMoral
     */
    domicilio?: string;
    /**
     * 
     * @type {EntidadFederativa}
     * @memberof PersonaMoral
     */
    entidad?: EntidadFederativa;
    /**
     * 
     * @type {string}
     * @memberof PersonaMoral
     */
    razonSocial?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaMoral
     */
    reniecyt?: string;
    /**
     * 
     * @type {Array<PersonaFisica>}
     * @memberof PersonaMoral
     */
    representantesLegales?: Array<PersonaFisica>;
    /**
     * 
     * @type {string}
     * @memberof PersonaMoral
     */
    rfc?: string;
    /**
     * 
     * @type {string}
     * @memberof PersonaMoral
     */
    tipo?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */
export enum TipoUsuario {
    Interno = 'interno',
    Externo = 'externo'
}


/**
 * CvuApi - axios parameter creator
 * @export
 */
export const CvuApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Obtiene una persona física por su número de CVU
         * @param {string} cvu cvu
         * @param {TipoUsuario} [tipoUsuario] El tipo de usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonaFisicaByCvu: async (cvu: string, tipoUsuario?: TipoUsuario, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'cvu' is not null or undefined
            if (cvu === null || cvu === undefined) {
                throw new RequiredError('cvu','Required parameter cvu was null or undefined when calling getPersonaFisicaByCvu.');
            }
            const localVarPath = `/api/cvu/{cvu}`
                .replace(`{${"cvu"}}`, encodeURIComponent(String(cvu)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tipoUsuario !== undefined) {
                localVarQueryParameter['tipo_usuario'] = tipoUsuario;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtiene a una persona física por su correo de usuario
         * @param {string} loginEmail loginEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonaFisicaByEmail: async (loginEmail: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginEmail' is not null or undefined
            if (loginEmail === null || loginEmail === undefined) {
                throw new RequiredError('loginEmail','Required parameter loginEmail was null or undefined when calling getPersonaFisicaByEmail.');
            }
            const localVarPath = `/api/personas/{loginEmail}`
                .replace(`{${"loginEmail"}}`, encodeURIComponent(String(loginEmail)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtiene una persona física por su número RCEA
         * @param {string} claveRcea claveRcea
         * @param {TipoUsuario} [tipoUsuario] El tipo de usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonaFisicaByRcea: async (claveRcea: string, tipoUsuario?: TipoUsuario, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'claveRcea' is not null or undefined
            if (claveRcea === null || claveRcea === undefined) {
                throw new RequiredError('claveRcea','Required parameter claveRcea was null or undefined when calling getPersonaFisicaByRcea.');
            }
            const localVarPath = `/api/rcea/{claveRcea}`
                .replace(`{${"claveRcea"}}`, encodeURIComponent(String(claveRcea)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (tipoUsuario !== undefined) {
                localVarQueryParameter['tipo_usuario'] = tipoUsuario;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtiene una persona moral por su clave RENIECYT
         * @param {string} numeroReniecyt numeroReniecyt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonaMoralByReniecyt: async (numeroReniecyt: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'numeroReniecyt' is not null or undefined
            if (numeroReniecyt === null || numeroReniecyt === undefined) {
                throw new RequiredError('numeroReniecyt','Required parameter numeroReniecyt was null or undefined when calling getPersonaMoralByReniecyt.');
            }
            const localVarPath = `/api/reniecyt/{numeroReniecyt}`
                .replace(`{${"numeroReniecyt"}}`, encodeURIComponent(String(numeroReniecyt)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CvuApi - functional programming interface
 * @export
 */
export const CvuApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Obtiene una persona física por su número de CVU
         * @param {string} cvu cvu
         * @param {TipoUsuario} [tipoUsuario] El tipo de usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonaFisicaByCvu(cvu: string, tipoUsuario?: TipoUsuario, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonaFisica>> {
            const localVarAxiosArgs = await CvuApiAxiosParamCreator(configuration).getPersonaFisicaByCvu(cvu, tipoUsuario, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Obtiene a una persona física por su correo de usuario
         * @param {string} loginEmail loginEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonaFisicaByEmail(loginEmail: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonaFisica>> {
            const localVarAxiosArgs = await CvuApiAxiosParamCreator(configuration).getPersonaFisicaByEmail(loginEmail, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Obtiene una persona física por su número RCEA
         * @param {string} claveRcea claveRcea
         * @param {TipoUsuario} [tipoUsuario] El tipo de usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonaFisicaByRcea(claveRcea: string, tipoUsuario?: TipoUsuario, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonaFisica>> {
            const localVarAxiosArgs = await CvuApiAxiosParamCreator(configuration).getPersonaFisicaByRcea(claveRcea, tipoUsuario, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Obtiene una persona moral por su clave RENIECYT
         * @param {string} numeroReniecyt numeroReniecyt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getPersonaMoralByReniecyt(numeroReniecyt: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PersonaMoral>> {
            const localVarAxiosArgs = await CvuApiAxiosParamCreator(configuration).getPersonaMoralByReniecyt(numeroReniecyt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CvuApi - factory interface
 * @export
 */
export const CvuApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Obtiene una persona física por su número de CVU
         * @param {string} cvu cvu
         * @param {TipoUsuario} [tipoUsuario] El tipo de usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonaFisicaByCvu(cvu: string, tipoUsuario?: TipoUsuario, options?: any): AxiosPromise<PersonaFisica> {
            return CvuApiFp(configuration).getPersonaFisicaByCvu(cvu, tipoUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtiene a una persona física por su correo de usuario
         * @param {string} loginEmail loginEmail
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonaFisicaByEmail(loginEmail: string, options?: any): AxiosPromise<PersonaFisica> {
            return CvuApiFp(configuration).getPersonaFisicaByEmail(loginEmail, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtiene una persona física por su número RCEA
         * @param {string} claveRcea claveRcea
         * @param {TipoUsuario} [tipoUsuario] El tipo de usuario
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonaFisicaByRcea(claveRcea: string, tipoUsuario?: TipoUsuario, options?: any): AxiosPromise<PersonaFisica> {
            return CvuApiFp(configuration).getPersonaFisicaByRcea(claveRcea, tipoUsuario, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtiene una persona moral por su clave RENIECYT
         * @param {string} numeroReniecyt numeroReniecyt
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getPersonaMoralByReniecyt(numeroReniecyt: string, options?: any): AxiosPromise<PersonaMoral> {
            return CvuApiFp(configuration).getPersonaMoralByReniecyt(numeroReniecyt, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CvuApi - object-oriented interface
 * @export
 * @class CvuApi
 * @extends {BaseAPI}
 */
export class CvuApi extends BaseAPI {
    /**
     * 
     * @summary Obtiene una persona física por su número de CVU
     * @param {string} cvu cvu
     * @param {TipoUsuario} [tipoUsuario] El tipo de usuario
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvuApi
     */
    public getPersonaFisicaByCvu(cvu: string, tipoUsuario?: TipoUsuario, options?: any) {
        return CvuApiFp(this.configuration).getPersonaFisicaByCvu(cvu, tipoUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtiene a una persona física por su correo de usuario
     * @param {string} loginEmail loginEmail
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvuApi
     */
    public getPersonaFisicaByEmail(loginEmail: string, options?: any) {
        return CvuApiFp(this.configuration).getPersonaFisicaByEmail(loginEmail, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtiene una persona física por su número RCEA
     * @param {string} claveRcea claveRcea
     * @param {TipoUsuario} [tipoUsuario] El tipo de usuario
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvuApi
     */
    public getPersonaFisicaByRcea(claveRcea: string, tipoUsuario?: TipoUsuario, options?: any) {
        return CvuApiFp(this.configuration).getPersonaFisicaByRcea(claveRcea, tipoUsuario, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtiene una persona moral por su clave RENIECYT
     * @param {string} numeroReniecyt numeroReniecyt
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CvuApi
     */
    public getPersonaMoralByReniecyt(numeroReniecyt: string, options?: any) {
        return CvuApiFp(this.configuration).getPersonaMoralByReniecyt(numeroReniecyt, options).then((request) => request(this.axios, this.basePath));
    }

}


